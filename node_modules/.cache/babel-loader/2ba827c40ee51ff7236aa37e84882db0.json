{"ast":null,"code":"import _classCallCheck from \"C:/Users/nsbra/Downloads/React-Music-Player-master/React-Music-Player-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/nsbra/Downloads/React-Music-Player-master/React-Music-Player-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"C:/Users/nsbra/Downloads/React-Music-Player-master/React-Music-Player-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:/Users/nsbra/Downloads/React-Music-Player-master/React-Music-Player-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"C:\\\\Users\\\\nsbra\\\\Downloads\\\\React-Music-Player-master\\\\React-Music-Player-master\\\\src\\\\containers\\\\Player\\\\Player.js\";\nimport React, { Component } from 'react';\nimport styles from './Player.module.css';\nimport Title from '../../components/Title/Title';\nimport Button from '../../components/Button/Button';\nimport ImageTile from '../../components/ImageTile/ImageTile';\nimport ArtistName from '../../components/ArtistName/ArtistName';\nimport DurationBar from '../../components/DurationBar/DurationBar';\nimport { CSSTransition } from 'react-transition-group';\nimport Axios from 'axios';\nimport SongList from '../SongList/SongList';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar Player = /*#__PURE__*/function (_Component) {\n  _inherits(Player, _Component);\n\n  var _super = _createSuper(Player);\n\n  //Initialize variables and state\n  function Player(props) {\n    var _this;\n\n    _classCallCheck(this, Player);\n\n    _this = _super.call(this, props);\n\n    _this.initializeSongLengthFunction = function () {\n      if (_this.state.currentSong.songURL) {\n        var duration = _this.audioComponent.audio.duration;\n        var seconds = Math.floor(duration % 60);\n        var minutes = Math.floor(duration / 60 % 60);\n        return _this.songLength[0].innerHTML = (minutes < 10 ? '0' + minutes : minutes) + ':' + (seconds < 10 ? '0' + seconds : seconds);\n      }\n    };\n\n    _this.togglePlayModeHandler = function () {\n      _this.setState({\n        playIsToggled: !_this.state.playIsToggled\n      });\n\n      _this.state.playIsToggled ? _this.audioComponent.audio.pause() : _this.audioComponent.audio.play();\n    };\n\n    _this.toggleMuteHandler = function () {\n      return _this.state.muteIsToggled ? _this.audioComponent.audio.muted = false : _this.audioComponent.audio.muted = true;\n    };\n\n    _this.backwardSongHandler = function () {\n      //Checks if this is not the first song on the list\n      if (_this.state.currentSongIndex > 0) {\n        var currentIndex = _this.state.currentSongIndex; //If shuffle is toggled, Randomize a song\n\n        if (_this.state.shuffleIsToggled) {\n          currentIndex = Math.floor(Math.random() * _this.state.songArray.length);\n        } else {\n          currentIndex--;\n        }\n\n        _this.switchSongHandler(currentIndex);\n      }\n    };\n\n    _this.forwardSongHandler = function () {\n      //Checks if the current song is not the last song on the list\n      if (_this.state.currentSongIndex <= _this.state.songArray.length - 1) {\n        var currentIndex = _this.state.currentSongIndex; //Checks if shuffle is toggled and if so, randomizes a song index\n\n        if (_this.state.shuffleIsToggled) {\n          currentIndex = Math.floor(Math.random() * _this.state.songArray.length);\n        } //If this is the last song on the list and repeat is on, reset the current index\n        else if (_this.state.currentSongIndex === _this.state.songArray.length - 1 && _this.state.repeatIsToggled) {\n            currentIndex = 0; //If it's not the last song, add one to the current index\n          } else if (_this.state.currentSongIndex < _this.state.songArray.length - 1) {\n            currentIndex++;\n          }\n\n        _this.switchSongHandler(currentIndex);\n      }\n    };\n\n    _this.switchSongHandler = function (index) {\n      _this.setState({\n        currentSongIndex: index,\n        currentSong: _this.state.songArray[index]\n      });\n    };\n\n    _this.switchSongFromList = function (event) {\n      _this.setState({\n        listIsToggled: false\n      });\n\n      _this.switchSongHandler(event.currentTarget.id);\n    };\n\n    _this.randomizeSong = function () {\n      var currentIndex = Math.floor(Math.random() * _this.state.songArray.length);\n\n      _this.switchSongHandler(currentIndex);\n    };\n\n    _this.togglePlayerOptions = function (modeToggled) {\n      switch (modeToggled) {\n        case 'shuffle':\n          return _this.setState({\n            shuffleIsToggled: !_this.state.shuffleIsToggled\n          });\n\n        case 'mute':\n          _this.setState({\n            muteIsToggled: !_this.state.muteIsToggled\n          });\n\n          return _this.toggleMuteHandler();\n\n        case 'list':\n          return _this.setState({\n            listIsToggled: !_this.state.listIsToggled,\n            playIsToggled: false\n          });\n\n        case 'repeat':\n          return _this.setState({\n            repeatIsToggled: !_this.state.repeatIsToggled\n          });\n\n        default:\n          return;\n      }\n    };\n\n    _this.state = {\n      songArray: null,\n      currentSong: {},\n      currentSongIndex: 0,\n      shuffleIsToggled: false,\n      repeatIsToggled: false,\n      muteIsToggled: false,\n      playIsToggled: false,\n      listIsToggled: false\n    };\n    _this.audioComponent = /*#__PURE__*/React.createRef();\n    _this.currentTimeElement = document.getElementsByClassName('current-time');\n    _this.songLength = document.getElementsByClassName('total-time');\n    return _this;\n  } //Calculate the minutes and seconds using song duration, output a formatted duration into the .total-time element\n\n\n  _createClass(Player, [{\n    key: \"componentDidMount\",\n    value: //Initialize song length rendering and fetch songs information from firebase\n    function componentDidMount() {\n      var _this2 = this;\n\n      // Axios .get('https://react-music-player-6bb10.firebaseio.com/Songs.json')\n      Axios.get('https://firebasestorage.googleapis.com/v0/b/musicplayer-bcf13.appspot.com/o/music.json?alt=media&token=91b99653-e50a-492c-99d4-93516e85675e').then(function (response) {\n        var songs = response.data; //Assign the data that was fetched from the server and initialize the first song\n\n        _this2.setState({\n          songArray: songs,\n          currentSong: songs[_this2.state.currentSongIndex]\n        }); //Prevent audio from playing after load\n\n\n        _this2.audioComponent.audio.pause();\n      }).catch(function (error) {\n        console.log(error);\n      }); //Calculate the length of the first song and display on load\n\n      this.initializeSongLengthFunction();\n    } //Toggle the playing state on click and play/pause the audio\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var togglePlayIcon = this.state.playIsToggled ? 'fas fa-pause fa-2x' : 'fas fa-play fa-2x';\n      var playerTitle = this.state.listIsToggled ? 'Choose A Song' : 'Now Playing';\n\n      if (this.state.currentSong.songURL) {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            'width': '100%'\n          },\n          children: [/*#__PURE__*/_jsxDEV(CSSTransition, {\n            in: true,\n            appear: true,\n            timeout: 300,\n            classNames: \"fadeTopBar\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: styles.TopBar,\n              children: [this.state.listIsToggled ? null : /*#__PURE__*/_jsxDEV(Button, {\n                isToggled: this.state.muteIsToggled,\n                toggledType: \"mute\",\n                click: function click(modeToggled) {\n                  return _this3.togglePlayerOptions(modeToggled);\n                },\n                type: \"ui-icon\",\n                icon: \"fas fa-volume-mute fa-2x\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 136,\n                columnNumber: 46\n              }, this), /*#__PURE__*/_jsxDEV(CSSTransition, {\n                in: this.state.listIsToggled,\n                timeout: 300,\n                classNames: \"textMove\",\n                children: /*#__PURE__*/_jsxDEV(Title, {\n                  children: playerTitle\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 138,\n                  columnNumber: 11\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 137,\n                columnNumber: 11\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                isToggled: this.state.listIsToggled,\n                toggledType: \"list\",\n                click: function click(modeToggled) {\n                  return _this3.togglePlayerOptions(modeToggled);\n                },\n                type: \"ui-icon\",\n                icon: \"fas fa-list-ul fa-2x\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 140,\n                columnNumber: 10\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 135,\n              columnNumber: 10\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: this.state.listIsToggled ? /*#__PURE__*/_jsxDEV(SongList, {\n              click: function click(event) {\n                return _this3.switchSongFromList(event);\n              },\n              songArray: this.state.songArray,\n              isOpen: this.state.listIsToggled\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 144,\n              columnNumber: 36\n            }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(CSSTransition, {\n                in: true,\n                appear: true,\n                timeout: 300,\n                classNames: \"fade\",\n                children: /*#__PURE__*/_jsxDEV(ImageTile, {\n                  src: this.state.currentSong.songIMG,\n                  alt: \"Song Cover\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 148,\n                  columnNumber: 9\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 147,\n                columnNumber: 8\n              }, this), /*#__PURE__*/_jsxDEV(CSSTransition, {\n                in: true,\n                appear: true,\n                timeout: 300,\n                classNames: \"fadeTopBar\",\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  style: {\n                    'transitionDelay': '400ms'\n                  },\n                  children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                    className: styles.SongInfo,\n                    children: /*#__PURE__*/_jsxDEV(\"div\", {\n                      children: [/*#__PURE__*/_jsxDEV(Title, {\n                        children: this.state.currentSong.songName\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 155,\n                        columnNumber: 12\n                      }, this), /*#__PURE__*/_jsxDEV(ArtistName, {\n                        children: this.state.currentSong.artistName\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 156,\n                        columnNumber: 12\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 154,\n                      columnNumber: 11\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 153,\n                    columnNumber: 10\n                  }, this), /*#__PURE__*/_jsxDEV(DurationBar, {\n                    isShuffleOn: this.state.shuffleIsToggled,\n                    randomizeSong: this.randomizeSong,\n                    onEnd: this.forwardSongHandler,\n                    onDragIndicator: this.togglePlayModeHandler,\n                    audioComponent: this.audioComponent,\n                    initializeTime: this.initializeSongLengthFunction,\n                    audioRef: function audioRef(el) {\n                      return _this3.audioComponent = el;\n                    },\n                    songURL: this.state.currentSong.songURL,\n                    playing: this.state.playIsToggled\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 162,\n                    columnNumber: 8\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: styles.PlayerControls,\n                    children: [/*#__PURE__*/_jsxDEV(Button, {\n                      isToggled: this.state.shuffleIsToggled,\n                      toggledType: \"shuffle\",\n                      click: function click(modeToggled) {\n                        return _this3.togglePlayerOptions(modeToggled);\n                      },\n                      type: \"player-flow-control\",\n                      icon: \"fas fa-random\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 165,\n                      columnNumber: 9\n                    }, this), /*#__PURE__*/_jsxDEV(Button, {\n                      click: this.backwardSongHandler,\n                      type: \"player-switch-control\",\n                      icon: \"fas fa-step-backward\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 166,\n                      columnNumber: 9\n                    }, this), /*#__PURE__*/_jsxDEV(Button, {\n                      click: this.togglePlayModeHandler,\n                      type: \"player-play-control\",\n                      icon: togglePlayIcon\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 167,\n                      columnNumber: 9\n                    }, this), /*#__PURE__*/_jsxDEV(Button, {\n                      click: this.forwardSongHandler,\n                      type: \"player-switch-control\",\n                      icon: \"fas fa-step-forward\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 168,\n                      columnNumber: 9\n                    }, this), /*#__PURE__*/_jsxDEV(Button, {\n                      isToggled: this.state.repeatIsToggled,\n                      toggledType: \"repeat\",\n                      click: function click(modeToggled) {\n                        return _this3.togglePlayerOptions(modeToggled);\n                      },\n                      type: \"player-flow-control\",\n                      icon: \"fas fa-redo\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 169,\n                      columnNumber: 9\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 164,\n                    columnNumber: 8\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 152,\n                  columnNumber: 9\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 151,\n                columnNumber: 6\n              }, this)]\n            }, void 0, true)\n          }, void 0, false)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 16\n        }, this);\n      } else {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"loader\",\n          children: \"Loading...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 15\n        }, this);\n      }\n\n      ;\n    }\n  }]);\n\n  return Player;\n}(Component);\n\nexport default Player;","map":{"version":3,"sources":["C:/Users/nsbra/Downloads/React-Music-Player-master/React-Music-Player-master/src/containers/Player/Player.js"],"names":["React","Component","styles","Title","Button","ImageTile","ArtistName","DurationBar","CSSTransition","Axios","SongList","Player","props","initializeSongLengthFunction","state","currentSong","songURL","duration","audioComponent","audio","seconds","Math","floor","minutes","songLength","innerHTML","togglePlayModeHandler","setState","playIsToggled","pause","play","toggleMuteHandler","muteIsToggled","muted","backwardSongHandler","currentSongIndex","currentIndex","shuffleIsToggled","random","songArray","length","switchSongHandler","forwardSongHandler","repeatIsToggled","index","switchSongFromList","event","listIsToggled","currentTarget","id","randomizeSong","togglePlayerOptions","modeToggled","createRef","currentTimeElement","document","getElementsByClassName","get","then","response","songs","data","catch","error","console","log","togglePlayIcon","playerTitle","TopBar","songIMG","SongInfo","songName","artistName","el","PlayerControls"],"mappings":";;;;;AAAE,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAOC,KAAP,MAAkB,8BAAlB;AACA,OAAOC,MAAP,MAAmB,gCAAnB;AACA,OAAOC,SAAP,MAAsB,sCAAtB;AACA,OAAOC,UAAP,MAAuB,wCAAvB;AACA,OAAOC,WAAP,MAAwB,0CAAxB;AACA,SAAQC,aAAR,QAA4B,wBAA5B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,sBAArB;;;;IACMC,M;;;;;AACJ;AACA,kBAAYC,KAAZ,EAAkB;AAAA;;AAAA;;AAChB,8BAAMA,KAAN;;AADgB,UAiBlBC,4BAjBkB,GAiBa,YAAM;AACnC,UAAG,MAAKC,KAAL,CAAWC,WAAX,CAAuBC,OAA1B,EAAkC;AAChC,YAAIC,QAAQ,GAAG,MAAKC,cAAL,CAAoBC,KAApB,CAA0BF,QAAzC;AACA,YAAMG,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAYL,QAAQ,GAAG,EAAvB,CAAhB;AACA,YAAMM,OAAO,GAAGF,IAAI,CAACC,KAAL,CAAYL,QAAQ,GAAG,EAAX,GAAgB,EAA5B,CAAhB;AACA,eAAO,MAAKO,UAAL,CAAgB,CAAhB,EAAmBC,SAAnB,GAA+B,CAACF,OAAO,GAAG,EAAV,GAAe,MAAMA,OAArB,GAA+BA,OAAhC,IAA2C,GAA3C,IAAkDH,OAAO,GAAG,EAAV,GAAe,MAAMA,OAArB,GAA+BA,OAAjF,CAAtC;AACD;AACF,KAxBiB;;AAAA,UA4ClBM,qBA5CkB,GA4CM,YAAM;AAC5B,YAAKC,QAAL,CAAc;AAACC,QAAAA,aAAa,EAAE,CAAC,MAAKd,KAAL,CAAWc;AAA5B,OAAd;;AACA,YAAKd,KAAL,CAAWc,aAAX,GAA2B,MAAKV,cAAL,CAAoBC,KAApB,CAA0BU,KAA1B,EAA3B,GAA+D,MAAKX,cAAL,CAAoBC,KAApB,CAA0BW,IAA1B,EAA/D;AACD,KA/CiB;;AAAA,UAiDlBC,iBAjDkB,GAiDE,YAAM;AACxB,aAAO,MAAKjB,KAAL,CAAWkB,aAAX,GAA2B,MAAKd,cAAL,CAAoBC,KAApB,CAA0Bc,KAA1B,GAAkC,KAA7D,GAAqE,MAAKf,cAAL,CAAoBC,KAApB,CAA0Bc,KAA1B,GAAkC,IAA9G;AACD,KAnDiB;;AAAA,UAqDlBC,mBArDkB,GAqDI,YAAM;AAC1B;AACA,UAAG,MAAKpB,KAAL,CAAWqB,gBAAX,GAA8B,CAAjC,EAAmC;AACjC,YAAIC,YAAY,GAAG,MAAKtB,KAAL,CAAWqB,gBAA9B,CADiC,CAEjC;;AACA,YAAG,MAAKrB,KAAL,CAAWuB,gBAAd,EAA+B;AAC7BD,UAAAA,YAAY,GAAGf,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACiB,MAAL,KAAgB,MAAKxB,KAAL,CAAWyB,SAAX,CAAqBC,MAAhD,CAAf;AACD,SAFD,MAEK;AACHJ,UAAAA,YAAY;AACb;;AACD,cAAKK,iBAAL,CAAuBL,YAAvB;AACD;AACF,KAjEiB;;AAAA,UAmElBM,kBAnEkB,GAmEG,YAAM;AACzB;AACA,UAAG,MAAK5B,KAAL,CAAWqB,gBAAX,IAA+B,MAAKrB,KAAL,CAAWyB,SAAX,CAAqBC,MAArB,GAA8B,CAAhE,EAAmE;AACjE,YAAIJ,YAAY,GAAG,MAAKtB,KAAL,CAAWqB,gBAA9B,CADiE,CAEjE;;AACA,YAAG,MAAKrB,KAAL,CAAWuB,gBAAd,EAA+B;AAC7BD,UAAAA,YAAY,GAAGf,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACiB,MAAL,KAAgB,MAAKxB,KAAL,CAAWyB,SAAX,CAAqBC,MAAhD,CAAf;AACD,SAFD,CAEE;AAFF,aAGK,IAAG,MAAK1B,KAAL,CAAWqB,gBAAX,KAAgC,MAAKrB,KAAL,CAAWyB,SAAX,CAAqBC,MAArB,GAA6B,CAA7D,IAAmE,MAAK1B,KAAL,CAAW6B,eAAjF,EAAiG;AACpGP,YAAAA,YAAY,GAAG,CAAf,CADoG,CAEpG;AACD,WAHI,MAGC,IAAG,MAAKtB,KAAL,CAAWqB,gBAAX,GAA8B,MAAKrB,KAAL,CAAWyB,SAAX,CAAqBC,MAArB,GAA8B,CAA/D,EAAiE;AACrEJ,YAAAA,YAAY;AACb;;AACD,cAAKK,iBAAL,CAAuBL,YAAvB;AACD;AACF,KAnFiB;;AAAA,UAqFlBK,iBArFkB,GAqFE,UAACG,KAAD,EAAW;AAC7B,YAAKjB,QAAL,CAAc;AAACQ,QAAAA,gBAAgB,EAAES,KAAnB;AAA0B7B,QAAAA,WAAW,EAAE,MAAKD,KAAL,CAAWyB,SAAX,CAAqBK,KAArB;AAAvC,OAAd;AACD,KAvFiB;;AAAA,UAyFlBC,kBAzFkB,GAyFG,UAACC,KAAD,EAAW;AAC9B,YAAKnB,QAAL,CAAc;AAACoB,QAAAA,aAAa,EAAE;AAAhB,OAAd;;AACA,YAAKN,iBAAL,CAAuBK,KAAK,CAACE,aAAN,CAAoBC,EAA3C;AACD,KA5FiB;;AAAA,UA8FlBC,aA9FkB,GA8FF,YAAM;AACpB,UAAId,YAAY,GAAGf,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACiB,MAAL,KAAgB,MAAKxB,KAAL,CAAWyB,SAAX,CAAqBC,MAAhD,CAAnB;;AACA,YAAKC,iBAAL,CAAuBL,YAAvB;AACD,KAjGiB;;AAAA,UAoGlBe,mBApGkB,GAoGI,UAACC,WAAD,EAAiB;AACrC,cAAOA,WAAP;AACE,aAAK,SAAL;AACA,iBAAO,MAAKzB,QAAL,CAAc;AAACU,YAAAA,gBAAgB,EAAE,CAAC,MAAKvB,KAAL,CAAWuB;AAA/B,WAAd,CAAP;;AACA,aAAK,MAAL;AACA,gBAAKV,QAAL,CAAc;AAACK,YAAAA,aAAa,EAAE,CAAC,MAAKlB,KAAL,CAAWkB;AAA5B,WAAd;;AACA,iBAAO,MAAKD,iBAAL,EAAP;;AACA,aAAK,MAAL;AACA,iBAAO,MAAKJ,QAAL,CAAc;AAACoB,YAAAA,aAAa,EAAE,CAAC,MAAKjC,KAAL,CAAWiC,aAA5B;AAA2CnB,YAAAA,aAAa,EAAE;AAA1D,WAAd,CAAP;;AACA,aAAK,QAAL;AACA,iBAAO,MAAKD,QAAL,CAAc;AAACgB,YAAAA,eAAe,EAAE,CAAC,MAAK7B,KAAL,CAAW6B;AAA9B,WAAd,CAAP;;AACA;AACA;AAXF;AAaD,KAlHiB;;AAEhB,UAAK7B,KAAL,GAAa;AACXyB,MAAAA,SAAS,EAAE,IADA;AAEXxB,MAAAA,WAAW,EAAE,EAFF;AAGXoB,MAAAA,gBAAgB,EAAE,CAHP;AAIXE,MAAAA,gBAAgB,EAAE,KAJP;AAKXM,MAAAA,eAAe,EAAE,KALN;AAMXX,MAAAA,aAAa,EAAE,KANJ;AAOXJ,MAAAA,aAAa,EAAE,KAPJ;AAQXmB,MAAAA,aAAa,EAAE;AARJ,KAAb;AAUA,UAAK7B,cAAL,gBAAsBlB,KAAK,CAACqD,SAAN,EAAtB;AACA,UAAKC,kBAAL,GAA0BC,QAAQ,CAACC,sBAAT,CAAgC,cAAhC,CAA1B;AACA,UAAKhC,UAAL,GAAkB+B,QAAQ,CAACC,sBAAT,CAAgC,YAAhC,CAAlB;AAdgB;AAejB,G,CACD;;;;;WAUA;AACA,iCAAoB;AAAA;;AACnB;AACC/C,MAAAA,KAAK,CAACgD,GAAN,CAAU,6IAAV,EACCC,IADD,CACM,UAAAC,QAAQ,EAAI;AAChB,YAAMC,KAAK,GAAGD,QAAQ,CAACE,IAAvB,CADgB,CAEhB;;AACA,QAAA,MAAI,CAAClC,QAAL,CAAc;AAACY,UAAAA,SAAS,EAAEqB,KAAZ;AAAmB7C,UAAAA,WAAW,EAAE6C,KAAK,CAAC,MAAI,CAAC9C,KAAL,CAAWqB,gBAAZ;AAArC,SAAd,EAHgB,CAIhB;;;AACA,QAAA,MAAI,CAACjB,cAAL,CAAoBC,KAApB,CAA0BU,KAA1B;AACD,OAPD,EAQCiC,KARD,CAQO,UAAUC,KAAV,EAAiB;AACtBC,QAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD,OAVD,EAFkB,CAalB;;AACA,WAAKlD,4BAAL;AACD,K,CACD;;;;WAwEA,kBAAS;AAAA;;AAEP,UAAIqD,cAAc,GAAG,KAAKpD,KAAL,CAAWc,aAAX,GAA2B,oBAA3B,GAAkD,mBAAvE;AACA,UAAIuC,WAAW,GAAG,KAAKrD,KAAL,CAAWiC,aAAX,GAA2B,eAA3B,GAA6C,aAA/D;;AACA,UAAG,KAAKjC,KAAL,CAAWC,WAAX,CAAuBC,OAA1B,EAAkC;AAChC,4BAAO;AAAK,UAAA,KAAK,EAAE;AAAC,qBAAS;AAAV,WAAZ;AAAA,kCACP,QAAC,aAAD;AAAe,YAAA,EAAE,EAAE,IAAnB;AAAyB,YAAA,MAAM,EAAE,IAAjC;AAAuC,YAAA,OAAO,EAAE,GAAhD;AAAqD,YAAA,UAAU,EAAC,YAAhE;AAAA,mCACC;AAAK,cAAA,SAAS,EAAEd,MAAM,CAACkE,MAAvB;AAAA,yBACE,KAAKtD,KAAL,CAAWiC,aAAX,GAA2B,IAA3B,gBAAkC,QAAC,MAAD;AAAQ,gBAAA,SAAS,EAAE,KAAKjC,KAAL,CAAWkB,aAA9B;AAA6C,gBAAA,WAAW,EAAC,MAAzD;AAAgE,gBAAA,KAAK,EAAE,eAACoB,WAAD;AAAA,yBAAiB,MAAI,CAACD,mBAAL,CAAyBC,WAAzB,CAAjB;AAAA,iBAAvE;AAA+H,gBAAA,IAAI,EAAC,SAApI;AAA8I,gBAAA,IAAI,EAAC;AAAnJ;AAAA;AAAA;AAAA;AAAA,sBADpC,eAEC,QAAC,aAAD;AAAe,gBAAA,EAAE,EAAE,KAAKtC,KAAL,CAAWiC,aAA9B;AAA6C,gBAAA,OAAO,EAAE,GAAtD;AAA2D,gBAAA,UAAU,EAAC,UAAtE;AAAA,uCACA,QAAC,KAAD;AAAA,4BAAQoB;AAAR;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA,sBAFD,eAKA,QAAC,MAAD;AAAQ,gBAAA,SAAS,EAAE,KAAKrD,KAAL,CAAWiC,aAA9B;AAA6C,gBAAA,WAAW,EAAC,MAAzD;AAAgE,gBAAA,KAAK,EAAE,eAACK,WAAD;AAAA,yBAAiB,MAAI,CAACD,mBAAL,CAAyBC,WAAzB,CAAjB;AAAA,iBAAvE;AAA+H,gBAAA,IAAI,EAAC,SAApI;AAA8I,gBAAA,IAAI,EAAC;AAAnJ;AAAA;AAAA;AAAA;AAAA,sBALA;AAAA;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,kBADO,eAUR;AAAA,sBACC,KAAKtC,KAAL,CAAWiC,aAAX,gBAA2B,QAAC,QAAD;AAAU,cAAA,KAAK,EAAE,eAACD,KAAD;AAAA,uBAAW,MAAI,CAACD,kBAAL,CAAwBC,KAAxB,CAAX;AAAA,eAAjB;AAA4D,cAAA,SAAS,EAAE,KAAKhC,KAAL,CAAWyB,SAAlF;AAA6F,cAAA,MAAM,EAAE,KAAKzB,KAAL,CAAWiC;AAAhH;AAAA;AAAA;AAAA;AAAA,oBAA3B,gBAED;AAAA,sCACA,QAAC,aAAD;AAAe,gBAAA,EAAE,EAAE,IAAnB;AAAyB,gBAAA,MAAM,EAAE,IAAjC;AAAuC,gBAAA,OAAO,EAAE,GAAhD;AAAqD,gBAAA,UAAU,EAAC,MAAhE;AAAA,uCACC,QAAC,SAAD;AAAW,kBAAA,GAAG,EAAE,KAAKjC,KAAL,CAAWC,WAAX,CAAuBsD,OAAvC;AAAgD,kBAAA,GAAG,EAAC;AAApD;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,sBADA,eAKF,QAAC,aAAD;AAAe,gBAAA,EAAE,EAAE,IAAnB;AAAyB,gBAAA,MAAM,EAAE,IAAjC;AAAuC,gBAAA,OAAO,EAAE,GAAhD;AAAqD,gBAAA,UAAU,EAAC,YAAhE;AAAA,uCACG;AAAK,kBAAA,KAAK,EAAE;AAAC,uCAAmB;AAApB,mBAAZ;AAAA,0CACC;AAAK,oBAAA,SAAS,EAAEnE,MAAM,CAACoE,QAAvB;AAAA,2CACC;AAAA,8CACC,QAAC,KAAD;AAAA,kCAAQ,KAAKxD,KAAL,CAAWC,WAAX,CAAuBwD;AAA/B;AAAA;AAAA;AAAA;AAAA,8BADD,eAEC,QAAC,UAAD;AAAA,kCAAa,KAAKzD,KAAL,CAAWC,WAAX,CAAuByD;AAApC;AAAA;AAAA;AAAA;AAAA,8BAFD;AAAA;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,0BADD,eAUD,QAAC,WAAD;AAAa,oBAAA,WAAW,EAAE,KAAK1D,KAAL,CAAWuB,gBAArC;AAAuD,oBAAA,aAAa,EAAE,KAAKa,aAA3E;AAA0F,oBAAA,KAAK,EAAE,KAAKR,kBAAtG;AAA0H,oBAAA,eAAe,EAAE,KAAKhB,qBAAhJ;AAAuK,oBAAA,cAAc,EAAE,KAAKR,cAA5L;AAA4M,oBAAA,cAAc,EAAE,KAAKL,4BAAjO;AAA+P,oBAAA,QAAQ,EAAE,kBAAA4D,EAAE;AAAA,6BAAK,MAAI,CAACvD,cAAL,GAAsBuD,EAA3B;AAAA,qBAA3Q;AAA2S,oBAAA,OAAO,EAAE,KAAK3D,KAAL,CAAWC,WAAX,CAAuBC,OAA3U;AAAoV,oBAAA,OAAO,EAAE,KAAKF,KAAL,CAAWc;AAAxW;AAAA;AAAA;AAAA;AAAA,0BAVC,eAYD;AAAK,oBAAA,SAAS,EAAE1B,MAAM,CAACwE,cAAvB;AAAA,4CACC,QAAC,MAAD;AAAQ,sBAAA,SAAS,EAAE,KAAK5D,KAAL,CAAWuB,gBAA9B;AAAgD,sBAAA,WAAW,EAAC,SAA5D;AAAsE,sBAAA,KAAK,EAAE,eAACe,WAAD;AAAA,+BAAiB,MAAI,CAACD,mBAAL,CAAyBC,WAAzB,CAAjB;AAAA,uBAA7E;AAAqI,sBAAA,IAAI,EAAC,qBAA1I;AAAgK,sBAAA,IAAI,EAAC;AAArK;AAAA;AAAA;AAAA;AAAA,4BADD,eAEC,QAAC,MAAD;AAAQ,sBAAA,KAAK,EAAE,KAAKlB,mBAApB;AAAyC,sBAAA,IAAI,EAAC,uBAA9C;AAAsE,sBAAA,IAAI,EAAC;AAA3E;AAAA;AAAA;AAAA;AAAA,4BAFD,eAGC,QAAC,MAAD;AAAQ,sBAAA,KAAK,EAAE,KAAKR,qBAApB;AAA2C,sBAAA,IAAI,EAAC,qBAAhD;AAAsE,sBAAA,IAAI,EAAEwC;AAA5E;AAAA;AAAA;AAAA;AAAA,4BAHD,eAIC,QAAC,MAAD;AAAQ,sBAAA,KAAK,EAAE,KAAKxB,kBAApB;AAAwC,sBAAA,IAAI,EAAC,uBAA7C;AAAqE,sBAAA,IAAI,EAAC;AAA1E;AAAA;AAAA;AAAA;AAAA,4BAJD,eAKC,QAAC,MAAD;AAAQ,sBAAA,SAAS,EAAE,KAAK5B,KAAL,CAAW6B,eAA9B;AAA+C,sBAAA,WAAW,EAAC,QAA3D;AAAoE,sBAAA,KAAK,EAAE,eAACS,WAAD;AAAA,+BAAiB,MAAI,CAACD,mBAAL,CAAyBC,WAAzB,CAAjB;AAAA,uBAA3E;AAAmI,sBAAA,IAAI,EAAC,qBAAxI;AAA8J,sBAAA,IAAI,EAAC;AAAnK;AAAA;AAAA;AAAA;AAAA,4BALD;AAAA;AAAA;AAAA;AAAA;AAAA,0BAZC;AAAA;AAAA;AAAA;AAAA;AAAA;AADH;AAAA;AAAA;AAAA;AAAA,sBALE;AAAA;AAHA,2BAVQ;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAP;AA4CD,OA7CD,MA6CK;AACJ,4BAAO;AAAK,UAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAP;AACA;;AAAA;AACF;;;;EAzKkBnD,S;;AA6KrB,eAAeU,MAAf","sourcesContent":["  import React, { Component } from 'react';\r\n  import styles from './Player.module.css';\r\n  import Title from '../../components/Title/Title';\r\n  import Button from '../../components/Button/Button';\r\n  import ImageTile from '../../components/ImageTile/ImageTile';\r\n  import ArtistName from '../../components/ArtistName/ArtistName';\r\n  import DurationBar from '../../components/DurationBar/DurationBar';\r\n  import {CSSTransition} from 'react-transition-group';\r\n  import Axios from 'axios';\r\n  import SongList from '../SongList/SongList';\r\n  class Player extends Component {\r\n    //Initialize variables and state\r\n    constructor(props){\r\n      super(props)\r\n      this.state = {\r\n        songArray: null,\r\n        currentSong: {},\r\n        currentSongIndex: 0,\r\n        shuffleIsToggled: false,\r\n        repeatIsToggled: false,\r\n        muteIsToggled: false,\r\n        playIsToggled: false,\r\n        listIsToggled: false\r\n      }\r\n      this.audioComponent = React.createRef();\r\n      this.currentTimeElement = document.getElementsByClassName('current-time');\r\n      this.songLength = document.getElementsByClassName('total-time');\r\n    }\r\n    //Calculate the minutes and seconds using song duration, output a formatted duration into the .total-time element\r\n    initializeSongLengthFunction = () => {\r\n      if(this.state.currentSong.songURL){\r\n        let duration = this.audioComponent.audio.duration;\r\n        const seconds = Math.floor( duration % 60 );\r\n        const minutes = Math.floor( duration / 60 % 60 );\r\n        return this.songLength[0].innerHTML = (minutes < 10 ? '0' + minutes : minutes) + ':' + (seconds < 10 ? '0' + seconds : seconds);\r\n      }\r\n    }\r\n\r\n    //Initialize song length rendering and fetch songs information from firebase\r\n    componentDidMount() {\r\n     // Axios .get('https://react-music-player-6bb10.firebaseio.com/Songs.json')\r\n      Axios.get('https://firebasestorage.googleapis.com/v0/b/musicplayer-bcf13.appspot.com/o/music.json?alt=media&token=91b99653-e50a-492c-99d4-93516e85675e')\r\n      .then(response => {\r\n        const songs = response.data\r\n        //Assign the data that was fetched from the server and initialize the first song\r\n        this.setState({songArray: songs, currentSong: songs[this.state.currentSongIndex]});\r\n        //Prevent audio from playing after load\r\n        this.audioComponent.audio.pause()\r\n      })\r\n      .catch(function (error) {\r\n        console.log(error);\r\n      });\r\n      //Calculate the length of the first song and display on load\r\n      this.initializeSongLengthFunction();\r\n    }\r\n    //Toggle the playing state on click and play/pause the audio\r\n    togglePlayModeHandler = () => {\r\n      this.setState({playIsToggled: !this.state.playIsToggled});\r\n      this.state.playIsToggled ? this.audioComponent.audio.pause() : this.audioComponent.audio.play();\r\n    }\r\n    //Toggling audio mute according to muteIsToggled state\r\n    toggleMuteHandler = () => {\r\n      return this.state.muteIsToggled ? this.audioComponent.audio.muted = false : this.audioComponent.audio.muted = true;\r\n    }\r\n    //Switch the song back\r\n    backwardSongHandler = () => {\r\n      //Checks if this is not the first song on the list\r\n      if(this.state.currentSongIndex > 0){\r\n        let currentIndex = this.state.currentSongIndex;\r\n        //If shuffle is toggled, Randomize a song\r\n        if(this.state.shuffleIsToggled){\r\n          currentIndex = Math.floor(Math.random() * this.state.songArray.length)\r\n        }else{\r\n          currentIndex--\r\n        }\r\n        this.switchSongHandler(currentIndex);\r\n      }\r\n    }\r\n    //Switch the song forward\r\n    forwardSongHandler = () => {\r\n      //Checks if the current song is not the last song on the list\r\n      if(this.state.currentSongIndex <= this.state.songArray.length - 1) {\r\n        let currentIndex = this.state.currentSongIndex;\r\n        //Checks if shuffle is toggled and if so, randomizes a song index\r\n        if(this.state.shuffleIsToggled){\r\n          currentIndex = Math.floor(Math.random() * this.state.songArray.length)\r\n        } //If this is the last song on the list and repeat is on, reset the current index\r\n        else if(this.state.currentSongIndex === this.state.songArray.length -1  && this.state.repeatIsToggled){\r\n          currentIndex = 0;\r\n          //If it's not the last song, add one to the current index\r\n        }else if(this.state.currentSongIndex < this.state.songArray.length - 1){\r\n          currentIndex++\r\n        }\r\n        this.switchSongHandler(currentIndex);\r\n      }\r\n    }\r\n    //Universal function to switch the song via state and reassign the current song index\r\n    switchSongHandler = (index) => {\r\n      this.setState({currentSongIndex: index, currentSong: this.state.songArray[index]});\r\n    }\r\n    //Upon a click on each of the list items, close the list and switch to the chosen song\r\n    switchSongFromList = (event) => {\r\n      this.setState({listIsToggled: false});\r\n      this.switchSongHandler(event.currentTarget.id);\r\n    }\r\n    //Randomize song and switch, used to trigger shuffle on songs endings\r\n    randomizeSong = () => {\r\n      let currentIndex = Math.floor(Math.random() * this.state.songArray.length) ;\r\n      this.switchSongHandler(currentIndex)\r\n    }\r\n\r\n    //Accepts the mode of the clicked button, toggles it and invoking the necessary functions related to the mode\r\n    togglePlayerOptions = (modeToggled) => {\r\n      switch(modeToggled) {\r\n        case 'shuffle':\r\n        return this.setState({shuffleIsToggled: !this.state.shuffleIsToggled});\r\n        case 'mute':\r\n        this.setState({muteIsToggled: !this.state.muteIsToggled});\r\n        return this.toggleMuteHandler()\r\n        case 'list':\r\n        return this.setState({listIsToggled: !this.state.listIsToggled, playIsToggled: false});\r\n        case 'repeat':\r\n        return this.setState({repeatIsToggled: !this.state.repeatIsToggled});\r\n        default:\r\n        return\r\n      }\r\n    }\r\n    render() {\r\n\r\n      let togglePlayIcon = this.state.playIsToggled ? 'fas fa-pause fa-2x' : 'fas fa-play fa-2x';\r\n      let playerTitle = this.state.listIsToggled ? 'Choose A Song' : 'Now Playing'\r\n      if(this.state.currentSong.songURL){\r\n        return <div style={{'width': '100%'}}>\r\n        <CSSTransition in={true} appear={true} timeout={300} classNames='fadeTopBar'>\r\n         <div className={styles.TopBar}>\r\n          {this.state.listIsToggled ? null : <Button isToggled={this.state.muteIsToggled} toggledType='mute' click={(modeToggled) => this.togglePlayerOptions(modeToggled)} type='ui-icon' icon='fas fa-volume-mute fa-2x' />}\r\n          <CSSTransition in={this.state.listIsToggled} timeout={300} classNames='textMove'>\r\n          <Title>{playerTitle}</Title>\r\n          </CSSTransition>\r\n         <Button isToggled={this.state.listIsToggled} toggledType='list' click={(modeToggled) => this.togglePlayerOptions(modeToggled)} type='ui-icon' icon='fas fa-list-ul fa-2x' />\r\n       </div>\r\n       </CSSTransition>\r\n       <>\r\n       {this.state.listIsToggled ? <SongList click={(event) => this.switchSongFromList(event)} songArray={this.state.songArray} isOpen={this.state.listIsToggled}/> :\r\n\r\n       <>\r\n       <CSSTransition in={true} appear={true} timeout={300} classNames='fade'>\r\n        <ImageTile src={this.state.currentSong.songIMG} alt='Song Cover' />\r\n       </CSSTransition>\r\n\r\n     <CSSTransition in={true} appear={true} timeout={300} classNames='fadeTopBar'>\r\n        <div style={{'transitionDelay': '400ms'}}>\r\n         <div className={styles.SongInfo}>\r\n          <div>\r\n           <Title>{this.state.currentSong.songName}</Title>\r\n           <ArtistName>{this.state.currentSong.artistName}</ArtistName>\r\n         </div>\r\n        </div>\r\n\r\n      {/*The duration bar holds inside the H5AudioComponent that is being used as the audio managing component.\r\n         This component is responsible for the audio playing, calculating and displaying durations and applying the seeking function according to the indicator*/}\r\n       <DurationBar isShuffleOn={this.state.shuffleIsToggled} randomizeSong={this.randomizeSong} onEnd={this.forwardSongHandler} onDragIndicator={this.togglePlayModeHandler} audioComponent={this.audioComponent} initializeTime={this.initializeSongLengthFunction} audioRef={el => (this.audioComponent = el)} songURL={this.state.currentSong.songURL} playing={this.state.playIsToggled}/>\r\n\r\n       <div className={styles.PlayerControls}>\r\n        <Button isToggled={this.state.shuffleIsToggled} toggledType='shuffle' click={(modeToggled) => this.togglePlayerOptions(modeToggled)} type='player-flow-control' icon='fas fa-random' />\r\n        <Button click={this.backwardSongHandler} type='player-switch-control' icon='fas fa-step-backward' />\r\n        <Button click={this.togglePlayModeHandler} type='player-play-control' icon={togglePlayIcon} />\r\n        <Button click={this.forwardSongHandler} type='player-switch-control' icon='fas fa-step-forward' />\r\n        <Button isToggled={this.state.repeatIsToggled} toggledType='repeat' click={(modeToggled) => this.togglePlayerOptions(modeToggled)} type='player-flow-control' icon='fas fa-redo' />\r\n       </div>\r\n      </div>\r\n     </CSSTransition>\r\n      </>\r\n       }\r\n       </>\r\n     </div>\r\n      }else{\r\n       return <div className=\"loader\">Loading...</div>;\r\n      };\r\n    }\r\n  }\r\n\r\n\r\n  export default Player;\r\n"]},"metadata":{},"sourceType":"module"}